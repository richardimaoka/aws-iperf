AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PeerRequesterAccountId:
    Type: String

Resources:
  PeerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Principal:
              AWS: !Ref PeerRequesterAccountId
            Action:
              - 'sts:AssumeRole'
            Effect: Allow
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'ec2:AcceptVpcPeeringConnection'
                Resource: '*'

  # Define VPC and Subnet
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: aws-iperf-vpc-main
  SubnetSameAZ:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/28
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-iperf-subnet-same-az
  SubnetDifferentAZ:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.17/28
      AvailabilityZone: ap-northeast-1c
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-iperf-subnet-different-az

  # Define Internet Gateway and the attachment to VPC          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: aws-iperf-igateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Define Route Table, its Route, and associate the Route Table with the Subnet
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: aws-iperf-route-table
  RouteInternetGateway:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable      
  SubnetSameAZRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetSameAZ
  SubnetDifferentAZRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetDifferentAZ
  # Define Security Group and its inbound rules (= ingress).
  # The outbound (egress) rules are automatically set as "Allow All".
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: aws-iperf-security-group
      GroupDescription: security group allowing SSH and ICMP
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-iperf-security-group
  SecurityGropuIngressInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SecurityGroup
  SecurityGropuIngressSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref SSHLocation
  SecurityGropuIngressICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: icmp
      FromPort: 8
      ToPort: 8
      CidrIp: !Ref SSHLocation

Outputs:
  VPC:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC"
  SecurityGroup:
    Description: SecurityGroup
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroup"
  SubnetSameAZ:
    Description: Subnet Same AvailabilityZone
    Value: !Ref SubnetSameAZ
    Export:
      Name: !Sub "${AWS::StackName}-SubnetSameAz"
  SubnetDifferentAZ:
    Description: Subnet Different AvailabilityZone
    Value: !Ref SubnetDifferentAZ
    Export:
      Name: !Sub "${AWS::StackName}-SubnetDifferentAz"      
  RoleARN:
    Export:
      Name: !Sub "${AWS::StackName}-RoleARN"      
    Value: !GetAtt 
      - PeerRole
      - Arn